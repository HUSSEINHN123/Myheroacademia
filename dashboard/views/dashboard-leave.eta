<%~ includeFile("partials/header.eta", {
	user: user
}); %>
<%~ includeFile("partials/message.eta") %>
<%~ includeFile("partials/title.eta", {
	icon: "fas fa-cog",
	title: "Dashboard"
}); %>
<% 
const shortcuts = [{
	name: "{userName}",
	desc: "t√™n th√†nh vi√™n r·ªùi kh·ªèi nh√≥m"
}, {
	name: "{userNameTag}",
	desc: "t√™n th√†nh vi√™n r·ªùi kh·ªèi nh√≥m (tag trong tin nh·∫Øn)"
}, {
	name: "{threadName}",
	desc: "t√™n nh√≥m chat c·ªßa b·∫°n"
}, {
	name: "{boxName}",
	desc: "t√™n nh√≥m chat c·ªßa b·∫°n"
}, {
	name: "{session}",
	desc: "bu·ªïi trong ng√†y"
}, {
	name: "{multiple}",
	desc: "b·∫°n | c√°c b·∫°n"
}, {
	name: "{type}",
	desc: "t·ª± r·ªùi | b·ªã qu·∫£n tr·ªã vi√™n kick"
}];
%>

<script>
  const shortcuts = <%~JSON.stringify(shortcuts)%>;
</script>
<script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
<script src="/js/jquery.highlight-within-textarea.js"></script>
<script src="/js/preview-modal.js"></script>
<link rel="stylesheet" href="/css/jquery.highlight-within-textarea.css">

<div class="container">
  <br>
  <div class="d-flex align-items-center mb-1">
    <span class="fw-bold mb-0 me-3" style="font-size: 1.2rem;">Thread Name: <%=threadData.threadName || "null"%></span>
  </div>
  <div class="d-flex align-items-center mb-3">
    <span class="fw-bold mb-0 me-3" style="font-size: 1.2rem;">Thread ID: <%=threadID%></span>
  </div>

  <h3 class="text-center">Custom Leave Message ü§ß</h3>

  <div class="row justify-content-between mt-3">
    <div class="col-12 col-lg-6 mb-3">
      <div class="row list" id="list-shortcut">
        <h4>Danh s√°ch c√°c shortcut c√≥ s·∫µn:</h4>
        <span class="text-muted mb-2">(Click v√†o shortcut ƒë·ªÉ copy)</span>

        <% for (const item of shortcuts) { %>
        <div class="ms-2">
          <span class="fw-bold text-primary copyToClipboard" data-copy="<%=item.name%>"><%=item.name%></span> <span class=""><%=item.desc%></span>
        </div>
        <% } %>
      </div>
    </div>

    <div class="col-12 col-lg-6 mb-3">
      <h4 class="mb-2">Tin nh·∫Øn t·∫°m bi·ªát th√†nh vi√™n r·ªùi nh√≥m:</h4>
      <textarea class="textarea-leave-message form-control rounded" rows="7" id="message" spellcheck="false" style="resize: none;"><%=threadData.data.leaveMessage || defaultLeaveMessage%></textarea>
    </div>
    <script>
      $('.textarea-leave-message').highlightWithinTextarea({
        highlight: shortcuts.map(item => item.name),
        className: 'blue'
      })
    </script>
  </div>

  <div class="justify-content-center d-flex">
    <button type="button" class="btn btn-phoenix-warning me-2" id="reset-message" value="<%=defaultLeaveMessage%>">Reset</button>
    <button class="btn btn-phoenix-primary" id="save-message">Save</button>
  </div>

  <hr>
  <h4>Nh·ªØng t·ªáp ƒë∆∞·ª£c g·ª≠i k√®m tin nh·∫Øn t·∫°m bi·ªát trong nh√≥m b·∫°n:</h4>
  <button class="mt-1 btn btn-sm btn-phoenix-danger disabled" id="delete-attachment-chosen">
    <i class="fas fa-trash"></i>
    X√≥a t·ªáp ƒë√≠nh k√®m ƒë√£ ch·ªçn
  </button>

  <div data-list="" class="table-responsive scrollbar" id="table-leave-attachment">
    <table class="table table-sm fs--1 table-bordered table-striped mt-3 align-middle">
      <thead>
        <tr>
          <th scope="col" class="text-center">
            <input type="checkbox" id="select-all-delete">
          </th>
          <th scope="col" class="text-center">Preview</th>
          <th scope="col" class="text-center sort" data-sort="name">Name</th>
          <th scope="col" class="text-center sort" data-sort="size">Size</th>
          <th scope="col" class="text-center sort" data-sort="setAt">Set At</th>
          <th scope="col" class="text-center">Action</th>
        </tr>
      </thead>
      <tbody class="list">
        <% for (const file of leaveAttachments) { %>
        <% const timeUpload = new Date(file.createdTime); %>
        <% const timestamp = timeUpload.getTime(); %>
        <% const getExt = file.fileExtension; %>
        <tr data-file-id="<%=file.id%>">
          <td class="text-center p-0">
            <input type="checkbox" value="<%=file.id%>" class="check-leave-attachment">
          </td>
          <td class="text-center align-items-center d-flex justify-content-center">
            <div style="height: 10vh; width: 20vh" class="d-flex justify-content-center align-items-center">
              <% if (imageExt.includes(getExt)) { %>
              <img src="<%=file.urlDownload%>" alt="image" class="preview-modal" style="width: 100%; height: 100%; object-fit: contain;">
              <% } else if (videoExt.includes(getExt)) { %>
              <video src="<%=file.urlDownload%>" controls class="preview-modal" style="width: 100%; height: 100%; object-fit: contain;">
                Your browser does not support the video tag.
              </video>
              <% } else if (audioExt.includes(getExt)) {%>
              <audio src="<%=file.urlDownload%>" controls class="preview-modal" style="width: 100%; height: 100%; object-fit: contain;">
                Your browser does not support the audio tag.
              </audio>
              <% } else { %>
              <img src="https://www.pngrepo.com/png/332374/180/file-unknown.png" class="preview-modal" style="width: 100%; height: 100%; object-fit: contain;">
              <% } %>
            </div>
          </td>
          <td class="text-center">
            <p class="mb-0 name" style="word-wrap: break-word;"><%=file.name%></p>
          </td>
          <td class="text-center text-nowrap">
            <p class="mb-0 size"><%=convertSize(file.size)%></p>
          </td>
          <td class="text-center ">
            <p class="mb-0 setAt" style="font-size: 0.8rem;"><%=timestamp%></p>
          </td>
          <td class="text-center">
            <a href="https://docs.google.com/uc?id=<%=file.id%>&export=download&confirm=t" role="button" class="btn btn-phoenix-primary" target="_blank">
              <i class="fas fa-download"></i>
            </a>
            <button class="btn btn-phoenix-danger btn-delete-attachment" data-file-id="<%=file.id%>">
              <i class="fas fa-trash"></i>
            </button>
          </td>
        </tr>
        <% } %>
      </tbody>
    </table>

    <ul class="pagination"></ul>
  </div>

  <label class="col-lg-2 col-form-label text-lg-right">Upload More Files:</label>
  <div class="rounded border">
    <div class="row">
      <!-- zone upload -->
      <div class="col-12 col-lg-6 col-xl-5 col-xxl-4">
        <div class="dropzone dz-clickable m-4 mb-2 me-lg-0" id="dropzone-upload">
          <div class="dz-message needsclick dropzone-select">
            <i class="ki-duotone ki-file-up fs-3 text-primary">
              <i class="fa-solid fa-file-arrow-up"></i>
            </i>
            <div class="ms-4">
              <h4 class="fw-bold text-gray-900 mb-1">Drop files here or click to upload.</h4>
              <span class="form-text text-muted">Max file size is 25MB and max number of files is 20.</span>
            </div>
          </div>
        </div>
        <div class="ms-4 mb-2 dropzone-panel">
          <button class="dropzone-remove-all btn btn-sm btn-phoenix-danger disabled" id="remove-all">Remove All</button>
          <!-- remove error -->
          <button class="dropzone-remove-all btn btn-sm btn-phoenix-danger d-none" id="remove-error">Clear Error</button>
          <button class="dropzone-upload btn btn-sm btn-phoenix-primary disabled" id="upload-all">Upload</button>
        </div>
        <div class="mb-3 bg-100 mx-4 me-lg-0 py-1 rounded text-muted px-2 bg-primary" style="--phoenix-bg-opacity: 0.1">
          <span class="" id="total-file-size">Total: <strong>0</strong> files <strong>(0 MB)</strong></span>
        </div>

      </div>

      <!-- zone preview -->
      <div class="col-12 col-lg-6 col-xl-7 col-xxl-8">
        <hr class="m-0 mb-3 d-none d-lg-none">
        <div class="dropzone-items px-2 ps-lg-0 mx-3 ms-lg-0" id="dropzone-preview-files">
        </div>
      </div>
    </div>
  </div>

</div>

<script type="text/javascript">
  (function() {
    overrideSortBySize();
    overrideSortBySetAt();

    const message = $("#message");
    const btnResetMessage = $("#reset-message");
    const btnUploadAll = $("#upload-all");
    const btnDeleteAttachments = $(".btn-delete-attachment");
    const btnDeleteAttachmentChosen = $("#delete-attachment-chosen");
    const btnDeleteAll = $("#remove-all");
    const btnDeleteError = $("#remove-error");
    const divListShortcut = $("#list-shortcut");
    const chkSelectAllDelete = $("#select-all-delete");
    const dropzonePreviewFiles = $("#dropzone-preview-files");
    const spanTotalFilesSize = $("#total-file-size");
    const dropzoneId = "#dropzone-upload";
    const tableLeaveAttachmentId = "#table-leave-attachment";

    Dropzone.autoDiscover = false;
    const dropzone = document.querySelector(dropzoneId);

    const myDropzone = new Dropzone(dropzoneId, {
      url: "/api/upload/leaveAttachment",
      parallelUploads: 20,
      method: "POST",
      maxFilesize: 25,
      autoQueue: false,
      uploadMultiple: true,
      dictFileTooBig: "File is too big ({{filesize}}MB). Max file size: {{maxFilesize}}MB.",
      dictResponseError: "Error while uploading file!",
      previewTemplate: `
			<div class="dropzone-item dz-image-preview bg-100 my-1 py-1 rounded-3">
				<div class="px-2 d-flex">
					<div class="dropzone-file me-auto">
						<div class="dropzone-filename d-flex" title="">
							<span data-dz-name></span>
							<strong class="">&nbsp;(<span data-dz-size></span>)</strong>
						</div>
						<small class="dropzone-error text-danger" data-dz-errormessage>
						</small>
					</div>

					<div class="dropzone-toolbar align-self-center ms-2">
						<i class="dropzone-delete fa-solid fa-square-minus" data-dz-remove></i>
					</div>
				</div>
			</div>`,
      previewsContainer: ".dropzone-items",
      clickable: dropzoneId + " .dropzone-select"
    });
    const totalFilesCanUpload = myDropzone.options.parallelUploads;


    btnDeleteAll.click(function() {
      myDropzone.removeAllFiles(true);
      handleDropzoneFilesChange(myDropzone);
    });

    btnDeleteError.click(function() {
      const filesError = myDropzone.getFilesWithStatus(Dropzone.ERROR);
      for (const file of filesError)
        myDropzone.removeFile(file);
      handleDropzoneFilesChange(myDropzone);
    });

    btnUploadAll.click(function() {
      if (myDropzone.getFilesWithStatus(Dropzone.ADDED).length == 0)
        return $.createToast({
          title: "Warning",
          message: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn",
          type: "warning"
        });
      btnUploadAll.html(`<span class="spinner-grow spinner-grow-sm text-info" role="status" aria-hidden="true"></span> Upload`);
      btnUploadAll.addClass("disabled");
      myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED));

      handleDropzoneFilesChange(myDropzone);
    });


    myDropzone.on("addedfile", function(file) {
      if (myDropzone.getFilesWithStatus(Dropzone.UPLOADING).length > 0) {
        $.createToast({
          title: "Warning",
          message: "ƒêang c√≥ file ƒëang ƒë∆∞·ª£c upload, vui l√≤ng ch·ªù",
          type: "warning"
        });
        myDropzone.removeFile(file);
        return;
      }

      // count current files in table and dropzone
      const totalFileAdded = myDropzone.getFilesWithStatus(Dropzone.ADDED).length;
      const childEl = listFile.items.length;

      if (totalFileAdded + childEl > totalFilesCanUpload) {
        $.createToast({
          title: "Warning",
          message: `Ch·ªâ ƒë∆∞·ª£c ph√©p upload t·ªëi ƒëa ${totalFilesCanUpload} file`,
          type: "warning"
        });
        myDropzone.removeFile(file);
        return;
      }

      handleDropzoneFilesChange(myDropzone);
      // Hook the delete button to remove the file
      file.previewElement.querySelector(".dropzone-delete").onclick = function() {
        myDropzone.removeFile(file);
      };
    });

    // when click delete button in each file
    myDropzone.on("removedfile", function(file) {
      handleDropzoneFilesChange(myDropzone);
    });

    myDropzone.on("sending", function(file, xhr, formData) {
      const toolBar = file.previewElement.querySelector('.dropzone-toolbar');
      toolBar.querySelector('.dropzone-delete').classList.add('d-none');
      const loading = $(`<div class="spinner-border spinner-border-sm text-info" role="status"></div>`)[0];
      toolBar.append(loading);

      if (!formData.has("threadID")) {
        formData.append("threadID", "<%=threadID%>");
        formData.append("commandName", "setleave");
      }
    });

    myDropzone.on("complete", function(file) {
      const toolBar = file.previewElement.querySelector('.dropzone-toolbar');
      const spinner = toolBar.querySelector('.spinner-border');
      if (spinner)
        spinner.remove();

      const firstChild = toolBar.firstElementChild;

      if (file.status == "error") {
        toolBar.querySelector('.dropzone-delete').classList.remove('d-none');
        file.previewElement.classList.add("bg-danger");
        $(file.previewElement).css('--phoenix-bg-opacity', 0.1);
      } else {
        const iconSuccess = $(`<i class="fas fa-check text-success"></i>`)[0];
        toolBar.append(iconSuccess);
      }

      handleDropzoneFilesChange(myDropzone);
    });

    // when complete upload all files
    myDropzone.on("queuecomplete", function(file, xhr, formData) {
      btnUploadAll.html(`Upload`);
      btnUploadAll.removeClass("disabled");
      handleDropzoneFilesChange(myDropzone);
    });

    myDropzone.on("success", function(file, response) {
      location.reload();
    });

    let lastError = Date.now(); // timestamp of last error
    myDropzone.on("error", function(file, err, xhr) {
      if (xhr) {
        if (Date.now() - lastError < 1000) {
          return;
        } else {
          lastError = Date.now();
          $.createToast({
            title: "Error",
            message: err.message,
            type: "error"
          });
        }
      }
    });

    $(".setAt").each(function() {
      const timeUpload = new Date(parseInt(this.innerHTML));
      this.innerHTML = timeUpload.toLocaleString();
    });
    const options = {
      page: 10,
      pagination: true,
      valueNames: ["name", "size", "setAt", "file-id"]
    };
    let listFile = new List(tableLeaveAttachmentId.replace('#', ''), options);

    btnResetMessage.click(function() {
      message.val(this.value);
    });

    // get event click id save
    $("#save-message").click(function() {
      const threadID = "<%=threadID%>";
      $.ajax({
        url: "/api/thread/setData/leaveMessage",
        type: "POST",
        data: {
          threadID: threadID,
          message: $("#message").val(),
          type: 'update'
        },
        success: function(data) {
          $.createToast({
            title: "Success",
            message: "L∆∞u th√†nh c√¥ng",
            type: "success"
          })
        },
        error: function(err) {
          $.createToast({
            title: "Error",
            message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i",
            type: "error"
          })
        }
      });
    });


    chkSelectAllDelete.click(function() {
      if (this.checked) {
        $(".check-leave-attachment").prop("checked", true);
        checkEnableDelete();
      } else {
        $(".check-leave-attachment").prop("checked", false);
        checkEnableDelete();
      }
    });

    $(document).on("click", ".check-leave-attachment", function() {
      if ($(".check-leave-attachment:checked").length == $(".check-leave-attachment").length) {
        $("#select-all-delete").prop("checked", true);
        checkEnableDelete();
      } else {
        $("#select-all-delete").prop("checked", false);
        checkEnableDelete();
      }
    });

    btnDeleteAttachments.click(function() {
      const fileID = $(this).attr("data-file-id");
      const confirmDeleteAttachment = makeAndShowModalConfirm([fileID]);

      confirmDeleteAttachment.find("#confirmDeleteAttachmentsBtn").click(function() {
        // remove modal
        confirmDeleteAttachment.modal("hide");

        $(this).html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>`);
        $(this).addClass("disabled");

        deleteFiles([fileID], function(res) {
          btnDeleteAttachments.html(`<i class="fas fa-trash"></i>`);
          btnDeleteAttachments.removeClass("disabled");
          const success = res.responseJSON.success;
          for (const fileID of success) {
            $(tableLeaveAttachmentId).find(`tr[data-file-id="${fileID}"]`)[0].remove();
            listFile.items = listFile.items.filter(item => item.elm.dataset.fileId != fileID);
          }

          listFile.update();
        });
      });
    });

    btnDeleteAttachmentChosen.click(function() {
      const allChecked = $(".check-leave-attachment:checked");
      const fileIDs = Array.from(allChecked).map(checkbox => checkbox.value);

      const confirmDeleteAttachment = makeAndShowModalConfirm(fileIDs);

      confirmDeleteAttachment.find("#confirmDeleteAttachmentsBtn").click(function() {
        // remove modal
        confirmDeleteAttachment.modal("hide");

        btnDeleteAttachmentChosen.html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> X√≥a t·ªáp ƒë√≠nh k√®m ƒë√£ ch·ªçn`);
        btnDeleteAttachmentChosen.addClass("disabled");

        deleteFiles(fileIDs, function(res) {
          btnDeleteAttachmentChosen.html(`X√≥a t·ªáp ƒë√≠nh k√®m ƒë√£ ch·ªçn`);
          btnDeleteAttachmentChosen.removeClass("disabled");
          const success = res.responseJSON.success;
          for (const fileID of success) {
            $(tableLeaveAttachmentId).find(`tr[data-file-id="${fileID}"]`)[0].remove();
            listFile.items = listFile.items.filter(item => item.elm.dataset.fileId != fileID);
          }

          listFile.update();
          checkEnableDelete();
        });
      });
    });


    function makeAndShowModalConfirm(fileIDs) {
      // show modal confirm
      const modalConfirm = $(`
			<div class="modal fade" id="confirmDeleteAttachments" tabindex="-1" aria-labelledby="confirmDeleteAttachmentsLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="confirmDeleteAttachmentsLabel">X√≥a t·ªáp ƒë√≠nh k√®m ƒë√£ ch·ªçn</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body">
						<p class="mb-0">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a <strong>${fileIDs.length}</strong> t·ªáp ƒë√≠nh k√®m ƒë√£ ch·ªçn?</p>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
							<button type="button" class="btn btn-danger" id="confirmDeleteAttachmentsBtn">X√≥a</button>
						</div>
					</div>
				</div>
			</div>
			`);

      // show modal
      $("body").append(modalConfirm);
      modalConfirm.modal("show");
      modalConfirm.on("hidden.bs.modal", function() {
        modalConfirm.remove();
      });

      return modalConfirm;
    }

    function deleteFiles(fileIDs, callback) {
      if (fileIDs.length == 0) {
        $.createToast({
          title: "Warning",
          message: "Please select a file to delete",
          type: "warning"
        });
        return;
      }

      $.ajax({
        url: '/api/delete/leaveAttachment',
        type: 'POST',
        data: {
          fileIDs,
          threadID: "<%=threadID%>",
          location: "data.leaveAttachment",
        },
        success: function(data) {
          if (data.status == 'error')
            return $.createToast({
              title: "Error",
              message: "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i",
              type: "error"
            });

          // for (const fileID of data.success)
          //   $(tableLeaveAttachmentId).find(`[data-file-id="${fileID}"]`).remove();

          if (data.success.length)
            $.createToast({
              title: "Success",
              message: `X√≥a ${data.success.length} file th√†nh c√¥ng`,
              type: "success"
            });

          if (data.failed.length)
            $.createToast({
              title: "Success",
              message: `X√≥a ${data.failed.length} file th·∫•t b·∫°i`,
              type: "error"
            });
        },
        error: function() {
          $.createToast({
            title: "Error",
            message: `X√≥a file th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i sau`,
            type: "error"
          });
        },
        complete: function(res) {
          callback(res);
        }
      });
    }

    function overrideSortBySize() {
      const btnSortBySize = $("#table-leave-attachment th[data-sort='size']");
      btnSortBySize.click(function() {
        const sort = $(this).attr("data-sort");
        const currentOrder = $(this).attr("data-order");
        const column = $(this).attr("data-sort");

        const sortFunction = function(a, b) {
          const sizeA = convertSize(a._values[column]);
          const sizeB = convertSize(b._values[column]);
          return parseInt(sizeA) > parseInt(sizeB) ? 1 : -1;
        };

        const newOrder = currentOrder === "asc" ? "desc" : "asc";
        listFile.sort(sort, {
          order: newOrder,
          sortFunction: sortFunction
        });

        $(this).attr("data-order", newOrder);
      });
    }

    function overrideSortBySetAt() {
      const btnSortBySetAt = $("#table-leave-attachment th[data-sort='setAt']");
      btnSortBySetAt.click(function() {
        const sort = $(this).attr("data-sort");
        const currentOrder = $(this).attr("data-order");
        const column = $(this).attr("data-sort");

        const sortFunction = function(a, b) {
          const setAtA = new Date(parseInt(a._values[column]));
          const setAtB = new Date(parseInt(b._values[column]));
          return setAtA.getTime() > setAtB.getTime() ? 1 : -1;
        };

        const newOrder = currentOrder === "asc" ? "desc" : "asc";
        listFile.sort(sort, {
          order: newOrder,
          sortFunction: sortFunction
        });

        $(this).attr("data-order", newOrder);
      });
    }


    function checkEnableDelete() {
      if ($(".check-leave-attachment:checked").length > 0)
        $("#delete-attachment-chosen").removeClass("disabled");
      else
        $("#delete-attachment-chosen").addClass("disabled");
    }

    // l·∫Øng nghe s·ª± ki·ªán khi s·ªë l∆∞·ª£ng files trong dropzone thay ƒë·ªïi
    function handleDropzoneFilesChange(myDropzone) {
      const totalFileAdded = myDropzone.getFilesWithStatus(Dropzone.ADDED).length;
      const childEl = $('.dropzone-item').length;

      if (childEl > 0) {
        if (!dropzonePreviewFiles.hasClass("mt-lg-4")) {
          dropzonePreviewFiles.addClass("mt-lg-4");
          dropzonePreviewFiles.addClass("mb-3");
          const hr = dropzonePreviewFiles.prev();
          if (hr.hasClass("d-none"))
            hr.removeClass("d-none");
        }

        if (totalFileAdded > totalFilesCanUpload) {
          $.createToast({
            title: "Warning",
            message: `Ch·ªâ ƒë∆∞·ª£c ph√©p upload t·ªëi ƒëa ${totalFilesCanUpload} file`,
            type: "warning"
          });
          myDropzone.removeFile(myDropzone.files[myDropzone.files - 1]);
        }
      } else {
        if (dropzonePreviewFiles.hasClass("mt-lg-4")) {
          dropzonePreviewFiles.removeClass("mt-lg-4");
          dropzonePreviewFiles.removeClass("mb-3");
          const hr = dropzonePreviewFiles.prev();
          if (!hr.hasClass("d-none"))
            hr.addClass("d-none");
        }
      }

      if (totalFileAdded > 0) {
        btnUploadAll.removeClass("disabled");
        btnDeleteAll.removeClass("disabled");
      } else {
        if (!btnUploadAll.hasClass("disabled"))
          btnUploadAll.addClass("disabled");
        if (!btnDeleteAll.hasClass("disabled"))
          btnDeleteAll.addClass("disabled");
      }

      const totalFileError = myDropzone.getFilesWithStatus(Dropzone.ERROR).length;
      if (totalFileError > 0) {
        btnDeleteError.removeClass("d-none");
      } else {
        if (!btnDeleteError.hasClass("d-none"))
          btnDeleteError.addClass("d-none");
      }

      const totalSize = myDropzone.getFilesWithStatus(Dropzone.ADDED).reduce((total, file) => total + file.size, 0);
      spanTotalFilesSize.html(`Total: <strong>${totalFileAdded}/${totalFilesCanUpload}</strong> files can be uploaded <strong>(${convertSize(totalSize)})</strong>`);
    }

    function convertSize(size) {
      if (size == 0)
        return "0 B";

      const parts = {
        GB: 1024 * 1024 * 1024,
        MB: 1024 * 1024,
        KB: 1024,
        B: 1
      };

      if (!isNaN(size)) {
        for (const [unit, part] of Object.entries(parts)) {
          if (size >= part)
            return `${(size / part).toFixed(2)} ${unit}`;
        }
      } else {
        // convert to B
        const [number, unit] = size.split(' ');
        return parseFloat(number) * parts[unit];
      }
    }

  })();
</script>
<%~ includeFile("partials/footer.eta") %>